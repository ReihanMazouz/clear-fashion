#import discord
#from discord.ext import commands
#bot = commands.Bot(command_prefix = "!", description = "Bot test")

import os
import random
import asyncio

import discord
from discord.ext import commands
from discord.ext.commands.converter import UserConverter

from dotenv import load_dotenv

load_dotenv() 
TOKEN = os.getenv('DISCORD_TOKEN')
SERVER = os.getenv('DISCORD_SERVER')

intents = discord.Intents.default()
intents.members = True
#client = discord.Client(intents = intents)
bot = commands.Bot(command_prefix = '!', intents = intents)

@bot.event
async def on_ready():
    print(f'{bot.user.name} has connected to Discord!')

@bot.event
async def on_member_join(member):
    role = discord.utils.get(member.guild.roles, name = "Client")
    await member.add_roles(role)

@bot.command(name = 'recette', help = 'R√©pond avec une recette au hasard.')
async def recipe(ctx):
    if ctx.author == bot.user:
        return
    recipes = ['Lasagnes ?', 'Pizza ?', 'G√¢teau ?']
    response = random.choice(recipes)
    await ctx.send(response)
    
@bot.command(name = 'de', help = 'Simule un lancer de d√©.')
async def roll(ctx, nombre_de_de: int, nombre_de_cote: int):
    dice = [str(random.choice(range(1, nombre_de_cote + 1)))
            for _ in range(nombre_de_de)]
    await ctx.send(', '.join(dice))
    
@bot.command(name = 'create-channel', brief = 'Cr√©er un nouveau channel textuel.', help = 'Cr√©er un nouveau channel textuel. Par d√©faut dans la cat√©gorie : SALONS TEXTUELS.')
@commands.has_role('Admin')
async def create_channel(ctx, channel_name, category_name = 'SALONS TEXTUELS'):
    server = ctx.guild
    existing_channel = discord.utils.get(server.channels, name = channel_name)
    category = discord.utils.get(ctx.guild.categories, name = category_name)
    
    if not category:
        await ctx.send(f'{ctx.author.mention}, cette cat√©gorie n\'existe pas. Place le channel dans une cat√©gorie existante.')
        return
    if not existing_channel:
        print(f'Creating a new channel: {channel_name}')
        await server.create_text_channel(channel_name, category = category)

@bot.command(name = 'hello', help = 'Message de bienvenue et de pr√©sentation du bot.')
async def hello(ctx):
    await ctx.send('Bienvenue chez **R&L**, le restaurant o√π toutes les saveurs se rejoignent.\nJe suis un **serveur virtuel** du restaurant. Vous pouvez commander votre repas avec moi en tapant ce que vous d√©sirez. Vous pouvez √©galement me demander d\'afficher le menu avec la commande ***!menu*** ou plus sp√©cifiquement les entr√©es, plats, desserts et m√™me les vins avec les commandes respectives (***!entrees***, ***!plats***, ***!desserts***, ***!vins***).\nJe peux aussi vous conseiller pour le choix d\'un verre de vin ou d\'un dessert si vous le souhaitez.')

@bot.command(name = 'menu', help = 'Affiche le menu du restaurant')
async def menu(ctx):
    #, file = discord.File('menu_complet.jpg')
    await ctx.send('Voici le menu complet :')
    message = await ctx.send('Si vous souhaitez acc√©der aux diff√©rentes cartes, veuillez cliquer sur l\'√©moji concern√© :\n\tü•ó : Entr√©es\n\tüçî : Plats\n\tüç™ : Desserts\n\tüç∑ : Vins')
    await message.add_reaction('ü•ó')
    await message.add_reaction('üçî')
    await message.add_reaction('üç™')
    await message.add_reaction('üç∑')
    
    def checkUser(reaction, user):
        return ctx.message.author == user and message.id == reaction.message.id
    
    loop = 0
    while loop == 0:
        try:
            reaction, user = await bot.wait_for("reaction_add", timeout = 60, check = checkUser)
            if reaction.emoji == 'ü•ó':
                await entrees.invoke(ctx)
                await message.remove_reaction('ü•ó', user)
            elif reaction.emoji == 'üçî':
                await plats.invoke(ctx)
                await message.remove_reaction('üçî', user)
            elif reaction.emoji == 'üç™':
                await desserts.invoke(ctx)
                await message.remove_reaction('üç™', user)
            elif reaction.emoji == 'üç∑':
                await vins.invoke(ctx)
                await message.remove_reaction('üç∑', user)
        except asyncio.TimeoutError:
            await ctx.send('Vous ne pouvez plus r√©agir avec les √©mojis.\nRetapez la commande ***!menu*** ou l\'une des commandes ***!entrees***, ***!plats***, ***!desserts*** ou ***!vins*** si vous souhaitez acc√©der de nouveaux aux menus.')
            loop = 1
    

@bot.command(name = 'entrees', help = 'Affiche les entr√©es √† la carte')
async def entrees(ctx):
    await ctx.send('Voici la carte des entr√©es :')

@bot.command(name = 'plats', help = 'Affiche les plats √† la carte')
async def plats(ctx):
    await ctx.send('Voici la carte des plats :')
    
@bot.command(name = 'desserts', help = 'Affiche les desserts √† la carte')
async def desserts(ctx):
    await ctx.send('Voici la carte des desserts :')
    
@bot.command(name = 'vins', help = 'Affiche les vins √† la carte')
async def vins(ctx):
    await ctx.send('Voici la carte des vins :')

@bot.command(name = 'bienvenue', help = 'Message d\'accueil')
async def bienvenue(ctx):
    accueil_channel_id = 823971750156304434
    if ctx.channel.id != accueil_channel_id:
        return
    message = await ctx.send('Bonjour et bienvenue chez **R&L**, le restaurant o√π toutes les saveurs se rejoignent.\n\
Je suis un serveur virtuel du restaurant et je vais vous accompagner tout au long de votre repas chez nous !\n\
Veuillez cliquer sur le **num√©ro** de votre table s\'il vous pla√Æt. Celui-ci est inscrit directement sur la table. Vous allez √™tre redirig√© vers le salon propre √† votre table. √Ä tout de suite üßë‚Äçüç≥')
    await message.add_reaction('1Ô∏è‚É£')
    await message.add_reaction('2Ô∏è‚É£')
    await message.add_reaction('3Ô∏è‚É£')
    await message.add_reaction('4Ô∏è‚É£')
    await message.add_reaction('5Ô∏è‚É£')
    
    def checkUser(reaction, user):
        #print(ctx.guild.members)
        return user in ctx.guild.members and message.id == reaction.message.id and message.author != bot.user
    
    loop = 0
    while loop == 0:
        try:
            reaction, user = await bot.wait_for("reaction_add", check = checkUser)
            print('oui')
            if reaction.emoji == '1Ô∏è‚É£':
                role = discord.utils.get(ctx.guild.roles, name = "Table 1")
                await user.add_roles(role)
                await message.remove_reaction('1Ô∏è‚É£', user)
            elif reaction.emoji == '2Ô∏è‚É£':
                role = discord.utils.get(ctx.guild.roles, name = "Table 2")
                await user.add_roles(role)
                await message.remove_reaction('2Ô∏è‚É£', user)
            elif reaction.emoji == '3Ô∏è‚É£':
                role = discord.utils.get(ctx.guild.roles, name = "Table 3")
                await user.add_roles(role)
                await message.remove_reaction('3Ô∏è‚É£', user)
            elif reaction.emoji == '4Ô∏è‚É£':
                role = discord.utils.get(ctx.guild.roles, name = "Table 4")
                await user.add_roles(role)
                await message.remove_reaction('4Ô∏è‚É£', user)
            elif reaction.emoji == '5Ô∏è‚É£':
                role = discord.utils.get(ctx.guild.roles, name = "Table 5")
                await user.add_roles(role)
                await message.remove_reaction('5Ô∏è‚É£', user)
        except asyncio.TimeoutError:
            await ctx.send('Vous ne pouvez plus r√©agir avec les √©mojis.\nRetapez la commande ***!bienvenue***.')
            loop = 1
    

@bot.command(name = 'delete', help = 'Supprime les messages pour nettoyer la table.')
@commands.has_any_role('Admin', 'Serveur')
async def delete(ctx, number: int = 100):
    messages = await ctx.channel.history(limit = number).flatten()
    await ctx.channel.delete_messages(messages)


    


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure):
        await ctx.send(f'{ctx.author.mention}, tu n\'as pas la permission de faire √ßa. Contacte un Admin si besoin.')


bot.run(TOKEN)